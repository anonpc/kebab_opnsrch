version: '3.8'

services:
  opensearch:
    image: opensearchproject/opensearch:${OPENSEARCH_VERSION:-2.11.0}
    container_name: ${OPENSEARCH_CONTAINER_NAME:-opensearch-performance}
    environment:
      - cluster.name=${OPENSEARCH_CLUSTER_NAME:-opensearch-cluster}
      - node.name=${OPENSEARCH_NODE_NAME:-opensearch-node1}
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=${OPENSEARCH_JAVA_OPTS:--Xms2g -Xmx2g}"
      # Security settings (configurable via env)
      - plugins.security.disabled=${OPENSEARCH_SECURITY_DISABLED:-true}
      - plugins.security.ssl.http.enabled=${OPENSEARCH_SSL_HTTP_ENABLED:-false}
      - plugins.security.ssl.transport.enabled=${OPENSEARCH_SSL_TRANSPORT_ENABLED:-false}
      # Performance Analyzer settings
      - webservice-bind-host=0.0.0.0
      - webservice-port=${OPENSEARCH_PA_PORT:-9600}
      # Performance settings
      - indices.memory.index_buffer_size=${OPENSEARCH_INDEX_BUFFER_SIZE:-30%}
      - indices.memory.min_index_buffer_size=${OPENSEARCH_MIN_INDEX_BUFFER_SIZE:-96mb}
      - thread_pool.write.queue_size=${OPENSEARCH_WRITE_QUEUE_SIZE:-1000}
      - thread_pool.search.queue_size=${OPENSEARCH_SEARCH_QUEUE_SIZE:-2000}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
      - ${OPENSEARCH_CONFIG_DIR:-./deployment/docker/performance-analyzer.yml}:/usr/share/opensearch/config/performance-analyzer.yml:ro
    ports:
      - "${OPENSEARCH_PORT:-9200}:9200"
      - "${OPENSEARCH_PA_PORT:-9600}:9600"
    networks:
      - opensearch-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: ${OPENSEARCH_HEALTH_INTERVAL:-30s}
      timeout: ${OPENSEARCH_HEALTH_TIMEOUT:-10s}
      retries: ${OPENSEARCH_HEALTH_RETRIES:-5}
    restart: unless-stopped

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:${OPENSEARCH_DASHBOARDS_VERSION:-2.11.0}
    container_name: ${OPENSEARCH_DASHBOARDS_CONTAINER_NAME:-opensearch-dashboards-performance}
    ports:
      - "${OPENSEARCH_DASHBOARDS_PORT:-5601}:5601"
    expose:
      - "5601"
    environment:
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: ${OPENSEARCH_DASHBOARDS_SECURITY_DISABLED:-true}
    depends_on:
      opensearch:
        condition: service_healthy
    networks:
      - opensearch-net
    restart: unless-stopped

  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    container_name: ${REDIS_CONTAINER_NAME:-redis-cache}
    command: redis-server --maxmemory ${REDIS_MAX_MEMORY:-1gb} --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - opensearch-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  api:
    build:
      context: ${BUILD_CONTEXT:-./}
      dockerfile: ${DOCKERFILE_PATH:-deployment/docker/Dockerfile}
    container_name: ${API_CONTAINER_NAME:-opensearch-worker-api}
    environment:
      # OpenSearch Configuration
      - OPENSEARCH_HOST=${OPENSEARCH_HOST:-opensearch:9200}
      - OPENSEARCH_INDEX_NAME=${OPENSEARCH_INDEX_NAME:-workers}
      - OPENSEARCH_TIMEOUT=${OPENSEARCH_TIMEOUT:-30}
      
      # Performance Analyzer Configuration
      - PA_ENABLED=${PA_ENABLED:-true}
      - PA_HOST=${PA_HOST:-opensearch}
      - PA_PORT=${PA_PORT:-9600}
      - PA_TIMEOUT=${PA_TIMEOUT:-10}
      - PA_METRICS_INTERVAL=${PA_METRICS_INTERVAL:-60}
      - PA_NODE_METRICS=${PA_NODE_METRICS:-true}
      - PA_CLUSTER_METRICS=${PA_CLUSTER_METRICS:-true}
      - PA_INDEX_METRICS=${PA_INDEX_METRICS:-true}
      
      # Cache Configuration
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - CACHE_BACKEND=${CACHE_BACKEND:-redis}
      - CACHE_REDIS_URL=${CACHE_REDIS_URL:-redis://redis:6379}
      - CACHE_TTL_SECONDS=${CACHE_TTL_SECONDS:-3600}
      
      # API Configuration
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8005}
      - API_WORKERS=${API_WORKERS:-2}
      - API_RELOAD=${API_RELOAD:-false}
      - API_ENABLE_DOCS=${API_ENABLE_DOCS:-true}
      
      # Application Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      
      # Security Configuration (disabled for development)
      - SECURITY_ENABLE_AUTH=${SECURITY_ENABLE_AUTH:-false}
      - SECURITY_JWT_SECRET=${SECURITY_JWT_SECRET:-development-secret-key}
      
      # Model Configuration
      - MODEL_NAME=${MODEL_NAME:-sentence-transformers/all-MiniLM-L6-v2}
      - MODEL_DEVICE=${MODEL_DEVICE:-auto}
      - MODEL_BATCH_SIZE=${MODEL_BATCH_SIZE:-32}
      
      # Indexing Configuration
      - INDEXING_STRATEGY=${INDEXING_STRATEGY:-lazy}
      - INDEXING_AUTO_INDEX_ON_STARTUP=${INDEXING_AUTO_INDEX_ON_STARTUP:-true}
      
    ports:
      - "${API_PORT:-8005}:8005"
    depends_on:
      opensearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - opensearch-net
    volumes:
      - ${LOGS_DIR:-./logs}:/app/logs
      - ${DATA_DIR:-./data}:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    container_name: ${PROMETHEUS_CONTAINER_NAME:-prometheus-monitoring}
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ${PROMETHEUS_CONFIG:-./deployment/docker/prometheus.yml}:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-15d}'
      - '--web.enable-lifecycle'
    networks:
      - opensearch-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-latest}
    container_name: ${GRAFANA_CONTAINER_NAME:-grafana-monitoring}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=${GRAFANA_ALLOW_SIGNUP:-false}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ${GRAFANA_DASHBOARDS_DIR:-./deployment/docker/grafana/dashboards}:/etc/grafana/provisioning/dashboards:ro
      - ${GRAFANA_DATASOURCES_DIR:-./deployment/docker/grafana/datasources}:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - opensearch-net
    restart: unless-stopped

volumes:
  opensearch-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  opensearch-net:
    driver: bridge 
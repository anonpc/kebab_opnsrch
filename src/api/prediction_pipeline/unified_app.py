"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±—ç–∫–µ–Ω–¥—ã –ø–æ–∏—Å–∫–∞ —Å –µ–¥–∏–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import asyncio
import time
from contextlib import asynccontextmanager
from typing import Dict, Any, List, Optional, Protocol

from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
from .models import SearchRequest, SearchResponse, WorkerResult
from src.core.shared.exceptions import create_error_handlers, SecurityError, AuthenticationError, AuthorizationError, SearchError

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º
from src.core.config import get_config, AppConfig
from src.core.shared.logging_config import setup_logging, get_logger
from src.core.shared.dependency_injection import configure_services, get_container
from src.core.shared.security import get_security_manager, get_current_user, validate_query, User
from src.core.shared.cache import get_cache_manager, cache_search_results
from src.core.shared.metrics import MetricsCollector

# –ò–º–ø–æ—Ä—Ç—ã –±—ç–∫–µ–Ω–¥–æ–≤
from .opensearch_engine import OpenSearchEngine
from .query_processor import QueryProcessor

logger = get_logger('api')

class SearchBackend(Protocol):
    """–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –±—ç–∫–µ–Ω–¥–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    async def search(self, query: str, user: User, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        ...
    
    async def health_check(self) -> Dict[str, Any]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±—ç–∫–µ–Ω–¥–∞."""
        ...

class OpenSearchBackend:
    """–ë—ç–∫–µ–Ω–¥ –ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenSearch."""
    
    def __init__(self, config: AppConfig):
        self.config = config
        self.query_processor = QueryProcessor()
        self._engine = None
        self._initialized = False
        self.cache_manager = get_cache_manager(config)
        self._indexing_strategy = None
    
    async def _ensure_initialized(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenSearch –¥–≤–∏–∂–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏."""
        if not self._initialized:
            try:
                self._engine = OpenSearchEngine()
                
                # üî• –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                from src.core.shared.indexing_strategies import get_indexing_strategy
                self._indexing_strategy = get_indexing_strategy(self.config)
                
                # üî• –ù–û–í–û–ï: –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                indexing_success = await self._indexing_strategy.ensure_indexed()
                if not indexing_success:
                    logger.warning("Indexing failed, search functionality may be limited")
                
                self._initialized = True
                logger.info("OpenSearch backend initialized successfully")
                
            except Exception as e:
                logger.error(f"Failed to initialize OpenSearch backend: {e}")
                raise SearchError(f"OpenSearch backend initialization failed: {e}")
    
    @cache_search_results(ttl_seconds=3600)
    async def search(self, query: str, user: User, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        await self._ensure_initialized()
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_manager = get_security_manager()
            clean_query = security_manager.input_validator.validate_search_query(query)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            logger.info(f"Search request from user {user.username}: {query[:100]}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            processed = self.query_processor.process_query(clean_query)
            
            # –ü–æ–∏—Å–∫ –≤ OpenSearch
            start_time = time.time()
            indices, scores, category_info = self._engine.search(
                clean_query,
                top_k=kwargs.get('top_k', 20)
            )
            search_time = (time.time() - start_time) * 1000
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            from src.core.shared.logging_config import log_performance
            log_performance('opensearch_search', search_time, 'ms', 'search')
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results = self._engine.format_results(indices, scores)
            
            return {
                'results': results,
                'query_info': {
                    'original_query': query,
                    'cleaned_query': clean_query,
                    'category': category_info[0] if category_info else None,
                    'confidence': category_info[1] if category_info else 0.0
                },
                'total_found': len(indices),
                'search_time_ms': round(search_time, 2)
            }
            
        except SecurityError:
            raise
        except Exception as e:
            logger.error(f"OpenSearch search failed: {e}")
            raise SearchError(f"Search failed: {e}")
    
    async def health_check(self) -> Dict[str, Any]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è OpenSearch –±—ç–∫–µ–Ω–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏."""
        try:
            await self._ensure_initialized()
            
            if not self._engine:
                return {
                    'healthy': False,
                    'error': 'Engine not initialized',
                    'cluster_status': 'unknown',
                    'index': {'exists': False, 'document_count': 0, 'has_data': False}
                }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenSearch
            health = self._engine.client.cluster.health()
            cluster_healthy = health['status'] in ['green', 'yellow']
            
            # üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
            index_info = await self._check_index_status()
            
            return {
                'healthy': cluster_healthy and index_info['has_data'],
                'cluster_status': health['status'],
                'cluster_name': health.get('cluster_name', 'unknown'),
                'index': index_info,
                'indexing_strategy': type(self._indexing_strategy).__name__ if self._indexing_strategy else None
            }
        except Exception as e:
            logger.error(f"OpenSearch health check failed: {e}")
            return {
                'healthy': False,
                'error': str(e),
                'cluster_status': 'unknown',
                'index': {'exists': False, 'document_count': 0, 'has_data': False}
            }
            
    async def _check_index_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞."""
        try:
            index_name = self._engine.index_name
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
            index_exists = self._engine.client.indices.exists(index=index_name)
            
            if not index_exists:
                return {
                    'exists': False,
                    'document_count': 0,
                    'has_data': False,
                    'status': 'missing'
                }
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            count_result = self._engine.client.count(index=index_name)
            doc_count = count_result.get('count', 0)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–¥–µ–∫—Å–∞
            stats = self._engine.client.indices.stats(index=index_name)
            index_size = stats['indices'][index_name]['total']['store']['size_in_bytes']
            
            return {
                'exists': True,
                'document_count': doc_count,
                'has_data': doc_count > 0,
                'size_bytes': index_size,
                'status': 'ready' if doc_count > 0 else 'empty'
            }
            
        except Exception as e:
            logger.error(f"Error checking index status: {e}")
            return {
                'exists': False,
                'document_count': 0,
                'has_data': False,
                'status': 'error',
                'error': str(e)
            }

class SearchService:
    """–°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º."""
    
    def __init__(self, backend: SearchBackend, config: AppConfig):
        self.backend = backend
        self.config = config
        self.metrics_collector = MetricsCollector()
    
    async def search(self, request: SearchRequest, user: User) -> SearchResponse:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º."""
        request_id = f"search_{int(time.time() * 1000)}"
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
            if not request.query or len(request.query.strip()) < 2:
                raise HTTPException(status_code=400, detail="Query too short")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            start_time = time.time()
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            results = await self.backend.search(
                query=request.query,
                user=user,
                top_k=request.top_k,
                filters=request.filters or {}
            )
            
            # –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
            execution_time = (time.time() - start_time) * 1000
            self.metrics_collector.record_search_request(
                query=request.query,
                results_count=results.get('total_found', 0),
                execution_time_ms=execution_time,
                user_id=user.id
            )
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –º–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞
            worker_results = []
            for result in results.get('results', []):
                worker_results.append(WorkerResult(
                    id=result.get('id', ''),
                    title=result.get('title', ''),
                    description=result.get('description', ''),
                    category=result.get('category', ''),
                    price=result.get('price', 0),
                    location=result.get('location', ''),
                    score=result.get('score', 0.0)
                ))
            
            return SearchResponse(
                results=worker_results,
                total_found=results.get('total_found', 0),
                query_info=results.get('query_info', {}),
                execution_time_ms=round(execution_time, 2)
            )
            
        except (SecurityError, AuthenticationError, AuthorizationError):
            raise
        except SearchError:
            raise
        except Exception as e:
            logger.error(f"Unexpected error in search service: {e}")
            raise SearchError(f"Search service error: {e}")
    
    async def health_check(self) -> Dict[str, Any]:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏."""
        # üî• –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –±—ç–∫–µ–Ω–¥–∞
        backend_health = await self.backend.health_check()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        cache_manager = get_cache_manager()
        cache_stats = cache_manager.get_stats()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_manager = get_security_manager()
        
        # üî• –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        overall_healthy = (
            backend_health.get('healthy', False) and
            backend_health.get('index', {}).get('has_data', False)
        )
        
        return {
            'status': 'healthy' if overall_healthy else 'unhealthy',
            'backend': type(self.backend).__name__,
            'opensearch': backend_health,
            'cache': cache_stats,
            'security': {
                'auth_enabled': security_manager.security_config.enable_auth,
                'rate_limiting': security_manager.security_config.rate_limiting_enabled
            },
            'indexing': {
                'strategy': backend_health.get('indexing_strategy', 'unknown'),
                'index_status': backend_health.get('index', {}).get('status', 'unknown'),
                'document_count': backend_health.get('index', {}).get('document_count', 0),
                'has_data': backend_health.get('index', {}).get('has_data', False)
            },
            'timestamp': time.time()
        }

# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–µ–Ω–¥–∞
def create_search_backend(config: AppConfig) -> SearchBackend:
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–µ–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    # –ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ OpenSearch
    return OpenSearchBackend(config)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
search_service: Optional[SearchService] = None
app_config: Optional[Config] = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π."""
    global search_service, app_config
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        app_config = Config()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging(app_config)
        logger.info("Starting unified search application")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        configure_services()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_manager = get_security_manager(app_config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if not security_manager.security_config.enable_auth:
            test_user = security_manager.create_test_user()
            logger.info("Test user created for development")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
        cache_manager = get_cache_manager(app_config)
        logger.info(f"Cache initialized: {cache_manager.cache_type}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        backend = create_search_backend(app_config)
        search_service = SearchService(backend, app_config)
        
        logger.info("Application startup completed successfully")
        yield
        
    except Exception as e:
        logger.error(f"Failed to initialize application: {e}")
        raise
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        logger.info("Application shutdown")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Unified Search API",
    description="–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è",
    version="3.0.0",
    lifespan=lifespan
)

# Middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
@app.middleware("http")
async def security_middleware(request: Request, call_next):
    """Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    security_manager = get_security_manager()
    return await security_manager.security_middleware(request, call_next)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Setup centralized error handling
app.state.debug = True  # Default debug mode for unified app
create_error_handlers(app)

# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
async def get_search_service() -> SearchService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞."""
    if search_service is None:
        raise HTTPException(status_code=503, detail="Search service not initialized")
    return search_service

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API
@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ."""
    return {
        "message": "Unified Search API", 
        "version": "3.0.0",
        "features": [
            "OpenSearch backend",
            "Security & Authentication",
            "Caching system", 
            "Performance monitoring",
            "Structured logging"
        ]
    }

@app.get("/health")
async def health_check(service: SearchService = Depends(get_search_service)):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    return await service.health_check()

@app.post("/search/", response_model=SearchResponse)
async def search_workers(
    request: SearchRequest,
    current_user: User = Depends(get_current_user),
    service: SearchService = Depends(get_search_service)
):
    """
    –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    
    - **query**: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)
    - **top_k**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)
    - **filters**: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    """
    return await service.search(request, current_user)

@app.get("/stats/cache")
async def get_cache_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞."""
    cache_manager = get_cache_manager()
    return cache_manager.get_stats()

@app.get("/stats/performance")
async def get_performance_stats(service: SearchService = Depends(get_search_service)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    return service.metrics_collector.get_stats()

@app.post("/admin/cache/clear")
async def clear_cache(current_user: User = Depends(get_current_user)):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    if 'admin' not in current_user.roles:
        raise AuthorizationError("Admin role required")
    
    cache_manager = get_cache_manager()
    cache_manager.clear()
    
    logger.info(f"Cache cleared by admin user {current_user.username}")
    return {"message": "Cache cleared successfully"}

@app.post("/admin/reindex")
async def trigger_reindex(
    force: bool = False,
    current_user: User = Depends(get_current_user),
    service: SearchService = Depends(get_search_service)
):
    """
    üî• –ù–û–í–û–ï: –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).
    
    Args:
        force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        current_user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        service: –°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞
    """
    if 'admin' not in current_user.roles:
        raise AuthorizationError("Admin role required")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±—ç–∫–µ–Ω–¥ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        backend = service.backend
        if not hasattr(backend, '_indexing_strategy') or not backend._indexing_strategy:
            return {"error": "Indexing strategy not available"}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
        logger.info(f"Manual reindexing triggered by admin user {current_user.username}, force={force}")
        
        if force:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
            success = await backend._indexing_strategy._run_indexing()
        else:
            # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            success = await backend._indexing_strategy.ensure_indexed()
        
        if success:
            logger.info("Manual reindexing completed successfully")
            return {
                "message": "Reindexing completed successfully",
                "forced": force,
                "triggered_by": current_user.username
            }
        else:
            logger.error("Manual reindexing failed")
            return {
                "error": "Reindexing failed",
                "forced": force,
                "triggered_by": current_user.username
            }
            
    except Exception as e:
        logger.error(f"Error during manual reindexing: {e}")
        raise HTTPException(status_code=500, detail=f"Reindexing error: {e}")

@app.get("/admin/index/status")
async def get_index_status(
    current_user: User = Depends(get_current_user),
    service: SearchService = Depends(get_search_service)
):
    """
    üî• –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–µ–∫—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).
    """
    if 'admin' not in current_user.roles:
        raise AuthorizationError("Admin role required")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        health_info = await service.health_check()
        
        return {
            "index": health_info.get("indexing", {}),
            "opensearch": health_info.get("opensearch", {}),
            "overall_status": health_info.get("status", "unknown"),
            "timestamp": health_info.get("timestamp", time.time())
        }
        
    except Exception as e:
        logger.error(f"Error getting index status: {e}")
        raise HTTPException(status_code=500, detail=f"Status check error: {e}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "unified_app:app", 
        host="0.0.0.0", 
        port=8005,
        reload=True,
        log_level="info"
    )
